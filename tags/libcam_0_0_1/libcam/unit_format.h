#ifndef __cam_unit_format_h__
#define __cam_unit_format_h__

#include "pixels.h"
#include <glib-object.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * SECTION:unit_format
 * @short_description: Describes how the data of a #CamUnit's input and output
 * buffers are formatted.
 *
 * The CamUnitFormat class provides hints about how to interpret the data
 * blocks in a #CamFrameBuffer generated by a #CamUnit.  Every #CamUnit has a
 * list of acceptable input formats, and possible output formats.  These lists
 * may change over time.  
 *
 * Additionally, every initialized #CamUnit (i.e. every #CamUnit that has
 * status CAM_UNIT_STATUS_STREAMING or CAM_UNIT_STATUS_READY) has an associated
 * output format.  It is expected that if a #CamUnit is bound to an output
 * format, then it will honor that format when generating buffers for its
 * outgoing queue.
 */

typedef struct _CamUnitFormat CamUnitFormat;
typedef struct _CamUnitFormatClass CamUnitFormatClass;

#define CAM_TYPE_UNIT_FORMAT  cam_unit_format_get_type()
#define CAM_UNIT_FORMAT(obj)  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
        CAM_TYPE_UNIT_FORMAT, CamUnitFormat))
#define CAM_UNIT_FORMAT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), \
            CAM_TYPE_UNIT_FORMAT, CamUnitFormatClass))
#define CAM_IS_UNIT_FORMAT(obj)   (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
            CAM_TYPE_UNIT_FORMAT))
#define CAM_IS_UNIT_FORMAT_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE (\
            (klass), CAM_TYPE_UNIT_FORMAT))
#define CAM_UNIT_FORMAT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), \
            CAM_TYPE_UNIT_FORMAT, CamUnitFormatClass))

/**
 * CamUnitFormat:
 * @pixelformat: the #CamPixelFormat
 * @name: a human-understandable description of the format 
 * @row_stride: number of bytes separating rows.  For packed data, this is
 *              typically derived from pixelformat and width.  usually
 *              something like 
 *        <screen>stride = (width * cam_pixel_format_bpppixelformat) / 8</screen>. 
 *        Should be 0 for formats where stride is not meaningful (e.g.
 *        compressed formats or planar data).
 * @width: the width, in pixels, of the frame
 * @height: the height, in pixels, of the frame.
 * @max_data_size: the maximum size of an image for this format, in bytes.
 *                 Used mostly for internal buffer allocation
 */
struct _CamUnitFormat {
    GObject parent;

    /*< public >*/
    CamPixelFormat pixelformat;
    char * name;
    int row_stride;
    int width;
    int height;
    int max_data_size;

    /*< protected >*/

    /*< private >*/
};

struct _CamUnitFormatClass {
    GObjectClass parent_class;
};

GType cam_unit_format_get_type (void);

/**
 * cam_unit_format_new:
 *
 * Returns: a newly created #CamUnitFormat
 */
CamUnitFormat *cam_unit_format_new (CamPixelFormat pfmt, const char *name, 
        int width, int height, int row_stride, int max_data_size);

/**
 * cam_unit_format_equals:
 *
 * Returns: 1 if the two formats are equal in all values, 0 if not
 */
int cam_unit_format_equals(const CamUnitFormat *self, const CamUnitFormat *a);

#ifdef __cplusplus
}
#endif

#endif
